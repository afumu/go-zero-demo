// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentFieldNames          = builder.RawFieldNames(&Student{})
	studentRows                = strings.Join(studentFieldNames, ",")
	studentRowsExpectAutoSet   = strings.Join(stringx.Remove(studentFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	studentRowsWithPlaceHolder = strings.Join(stringx.Remove(studentFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"
)

type (
	studentModel interface {
		Insert(ctx context.Context, data *Student) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Student, error)
		Update(ctx context.Context, data *Student) error
		Delete(ctx context.Context, id int64) error
	}

	defaultStudentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Student struct {
		Id         int64     `db:"id"`
		Name       string    `db:"name"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"UpdateTime"`
	}
)

func newStudentModel(conn sqlx.SqlConn) *defaultStudentModel {
	return &defaultStudentModel{
		conn:  conn,
		table: "`student`",
	}
}

func (m *defaultStudentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultStudentModel) FindOne(ctx context.Context, id int64) (*Student, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", studentRows, m.table)
	var resp Student
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentModel) Insert(ctx context.Context, data *Student) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, studentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.UpdateTime)
	return ret, err
}

func (m *defaultStudentModel) Update(ctx context.Context, data *Student) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, studentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.UpdateTime, data.Id)
	return err
}

func (m *defaultStudentModel) tableName() string {
	return m.table
}
